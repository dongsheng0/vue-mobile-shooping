{"remainingRequest":"C:\\project_xcx\\vue-mobile-shooping\\node_modules\\babel-loader\\lib\\index.js!C:\\project_xcx\\vue-mobile-shooping\\node_modules\\eslint-loader\\index.js??ref--13-0!C:\\project_xcx\\vue-mobile-shooping\\src\\config\\axios.js","dependencies":[{"path":"C:\\project_xcx\\vue-mobile-shooping\\src\\config\\axios.js","mtime":1567410231961},{"path":"C:\\project_xcx\\vue-mobile-shooping\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\project_xcx\\vue-mobile-shooping\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\project_xcx\\vue-mobile-shooping\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import axios from 'axios';\naxios.defaults.timeout = 5000;\n\nvar requestHandler = function requestHandler(config) {\n  config.data = JSON.stringify(config.data);\n  config.headers = {\n    'Content-Type': 'application/x-www-form-urlencoded'\n  };\n  return config;\n};\n\nvar errorHandler = function errorHandler(error) {\n  return Promise.reject(error);\n}; //http request 拦截器\n\n\naxios.interceptors.request.use(requestHandler, errorHandler);\n\nvar responseHandler = function responseHandler(response) {\n  return response;\n};\n\nvar responseHandlerError = function responseHandlerError(err) {\n  var errMsg = '';\n\n  if (err && err.response) {\n    switch (err.response.status) {\n      case 400:\n        errMsg = '错误请求';\n        break;\n\n      case 401:\n        errMsg = '未授权，请重新登录';\n        break;\n\n      case 403:\n        errMsg = '拒绝访问';\n        break;\n\n      case 404:\n        errMsg = '请求错误,未找到该资源';\n        break;\n\n      case 405:\n        errMsg = '请求方法未允许';\n        break;\n\n      case 408:\n        errMsg = '请求超时';\n        break;\n\n      case 500:\n        errMsg = '服务器端出错';\n        break;\n\n      case 501:\n        errMsg = '网络未实现';\n        break;\n\n      case 502:\n        errMsg = '网络错误';\n        break;\n\n      case 503:\n        errMsg = '服务不可用';\n        break;\n\n      case 504:\n        errMsg = '网络超时';\n        break;\n\n      case 505:\n        errMsg = 'http版本不支持该请求';\n        break;\n\n      default:\n        errMsg = \"\\u8FDE\\u63A5\\u9519\\u8BEF\".concat(err.response.status);\n    }\n  } else {\n    errMsg = '连接到服务器失败';\n  }\n\n  console.log(\"10000\".concat(errMsg));\n  return Promise.resolve(err.response);\n}; //响应拦截器即异常处理\n\n\naxios.interceptors.response.use(responseHandler, responseHandlerError);\nvar API = '/cgi';\n/**\r\n * 封装get方法\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\n\nfunction process(res) {\n  if (res.data.code == 0) {\n    return Promise.resolve(res.data);\n  } else {\n    return Promise.reject(res.data);\n  }\n}\n\nexport function get(url) {\n  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.get(\"\".concat(API).concat(url), {\n      params: params\n    }).then(function (res) {\n      if (res.data.code == 0) {\n        resolve(res.data);\n      } else {\n        reject(res.data);\n      }\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}\n/**\r\n * 封装post请求\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\n\nexport function post(url) {\n  var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return new Promise(function (resolve, reject) {\n    axios.post(\"\".concat(API, \"url\"), data).then(function (response) {\n      process(response);\n    }, function (err) {\n      reject(err);\n    });\n  });\n}",{"version":3,"sources":["C:\\project_xcx\\vue-mobile-shooping\\src\\config\\axios.js"],"names":["axios","defaults","timeout","requestHandler","config","data","JSON","stringify","headers","errorHandler","error","Promise","reject","interceptors","request","use","responseHandler","response","responseHandlerError","err","errMsg","status","console","log","resolve","API","process","res","code","get","url","params","then","catch","post"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\n\r\naxios.defaults.timeout = 5000;\r\n\r\nconst requestHandler = config => {\r\n  config.data = JSON.stringify(config.data);\r\n  config.headers = {\r\n    'Content-Type': 'application/x-www-form-urlencoded'\r\n  }\r\n  return config;\r\n}\r\nconst errorHandler = error => Promise.reject(error);\r\n//http request 拦截器\r\naxios.interceptors.request.use(requestHandler, errorHandler);\r\n\r\nconst responseHandler = response => {\r\n  return response\r\n}\r\nconst responseHandlerError = err => {\r\n  let errMsg = ''\r\n  if (err && err.response) {\r\n    switch (err.response.status) {\r\n      case 400:\r\n        errMsg = '错误请求'\r\n        break;\r\n      case 401:\r\n        errMsg = '未授权，请重新登录'\r\n        break;\r\n      case 403:\r\n        errMsg = '拒绝访问'\r\n        break;\r\n      case 404:\r\n        errMsg = '请求错误,未找到该资源'\r\n        break;\r\n      case 405:\r\n        errMsg = '请求方法未允许'\r\n        break;\r\n      case 408:\r\n        errMsg = '请求超时'\r\n        break;\r\n      case 500:\r\n        errMsg = '服务器端出错'\r\n        break;\r\n      case 501:\r\n        errMsg = '网络未实现'\r\n        break;\r\n      case 502:\r\n        errMsg = '网络错误'\r\n        break;\r\n      case 503:\r\n        errMsg = '服务不可用'\r\n        break;\r\n      case 504:\r\n        errMsg = '网络超时'\r\n        break;\r\n      case 505:\r\n        errMsg = 'http版本不支持该请求'\r\n        break;\r\n      default:\r\n        errMsg = `连接错误${err.response.status}`\r\n    }\r\n  } else {\r\n    errMsg = '连接到服务器失败'\r\n  }\r\n  console.log(`10000${errMsg}`)\r\n  return Promise.resolve(err.response)\r\n}\r\n//响应拦截器即异常处理\r\naxios.interceptors.response.use(responseHandler, responseHandlerError)\r\n\r\nlet API = '/cgi'\r\n\r\n/**\r\n * 封装get方法\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\r\nfunction process(res) {\r\n  if (res.data.code == 0) {\r\n    return Promise.resolve(res.data);\r\n  } else {\r\n    return Promise.reject(res.data);\r\n  }\r\n}\r\nexport function get(url, params = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    axios.get(`${API}${url}`, {\r\n        params: params\r\n      })\r\n      .then(res => {\r\n        if (res.data.code == 0) {\r\n          resolve(res.data);\r\n        } else {\r\n          reject(res.data);\r\n        }\r\n      })\r\n      .catch(err => {\r\n        reject(err)\r\n      })\r\n  })\r\n}\r\n\r\n\r\n/**\r\n * 封装post请求\r\n * @param url\r\n * @param data\r\n * @returns {Promise}\r\n */\r\n\r\nexport function post(url, data = {}) {\r\n  return new Promise((resolve, reject) => {\r\n    axios.post(`${API}url`, data)\r\n      .then(response => {\r\n        process(response)\r\n      }, err => {\r\n        reject(err)\r\n      })\r\n  })\r\n}"]}]}